// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `uksmd_ctl.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:MemAgent.Addr)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Addr {
    // message fields
    // @@protoc_insertion_point(field:MemAgent.Addr.start)
    pub start: u64,
    // @@protoc_insertion_point(field:MemAgent.Addr.end)
    pub end: u64,
    // special fields
    // @@protoc_insertion_point(special_field:MemAgent.Addr.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Addr {
    fn default() -> &'a Addr {
        <Addr as ::protobuf::Message>::default_instance()
    }
}

impl Addr {
    pub fn new() -> Addr {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start",
            |m: &Addr| { &m.start },
            |m: &mut Addr| { &mut m.start },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end",
            |m: &Addr| { &m.end },
            |m: &mut Addr| { &mut m.end },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Addr>(
            "Addr",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Addr {
    const NAME: &'static str = "Addr";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.start = is.read_uint64()?;
                },
                16 => {
                    self.end = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.start != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.start);
        }
        if self.end != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.end);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.start != 0 {
            os.write_uint64(1, self.start)?;
        }
        if self.end != 0 {
            os.write_uint64(2, self.end)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Addr {
        Addr::new()
    }

    fn clear(&mut self) {
        self.start = 0;
        self.end = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Addr {
        static instance: Addr = Addr {
            start: 0,
            end: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Addr {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Addr").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Addr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Addr {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:MemAgent.AddRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AddRequest {
    // message fields
    // @@protoc_insertion_point(field:MemAgent.AddRequest.pid)
    pub pid: u64,
    // message oneof groups
    pub OptAddr: ::std::option::Option<add_request::OptAddr>,
    // special fields
    // @@protoc_insertion_point(special_field:MemAgent.AddRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddRequest {
    fn default() -> &'a AddRequest {
        <AddRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddRequest {
    pub fn new() -> AddRequest {
        ::std::default::Default::default()
    }

    // .MemAgent.Addr addr = 2;

    pub fn addr(&self) -> &Addr {
        match self.OptAddr {
            ::std::option::Option::Some(add_request::OptAddr::Addr(ref v)) => v,
            _ => <Addr as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_addr(&mut self) {
        self.OptAddr = ::std::option::Option::None;
    }

    pub fn has_addr(&self) -> bool {
        match self.OptAddr {
            ::std::option::Option::Some(add_request::OptAddr::Addr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_addr(&mut self, v: Addr) {
        self.OptAddr = ::std::option::Option::Some(add_request::OptAddr::Addr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_addr(&mut self) -> &mut Addr {
        if let ::std::option::Option::Some(add_request::OptAddr::Addr(_)) = self.OptAddr {
        } else {
            self.OptAddr = ::std::option::Option::Some(add_request::OptAddr::Addr(Addr::new()));
        }
        match self.OptAddr {
            ::std::option::Option::Some(add_request::OptAddr::Addr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_addr(&mut self) -> Addr {
        if self.has_addr() {
            match self.OptAddr.take() {
                ::std::option::Option::Some(add_request::OptAddr::Addr(v)) => v,
                _ => panic!(),
            }
        } else {
            Addr::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &AddRequest| { &m.pid },
            |m: &mut AddRequest| { &mut m.pid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Addr>(
            "addr",
            AddRequest::has_addr,
            AddRequest::addr,
            AddRequest::mut_addr,
            AddRequest::set_addr,
        ));
        oneofs.push(add_request::OptAddr::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddRequest>(
            "AddRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AddRequest {
    const NAME: &'static str = "AddRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pid = is.read_uint64()?;
                },
                18 => {
                    self.OptAddr = ::std::option::Option::Some(add_request::OptAddr::Addr(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.pid != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.pid);
        }
        if let ::std::option::Option::Some(ref v) = self.OptAddr {
            match v {
                &add_request::OptAddr::Addr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.pid != 0 {
            os.write_uint64(1, self.pid)?;
        }
        if let ::std::option::Option::Some(ref v) = self.OptAddr {
            match v {
                &add_request::OptAddr::Addr(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddRequest {
        AddRequest::new()
    }

    fn clear(&mut self) {
        self.pid = 0;
        self.OptAddr = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddRequest {
        static instance: AddRequest = AddRequest {
            pid: 0,
            OptAddr: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AddRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AddRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AddRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AddRequest`
pub mod add_request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:MemAgent.AddRequest.OptAddr)
    pub enum OptAddr {
        // @@protoc_insertion_point(oneof_field:MemAgent.AddRequest.addr)
        Addr(super::Addr),
    }

    impl ::protobuf::Oneof for OptAddr {
    }

    impl ::protobuf::OneofFull for OptAddr {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AddRequest as ::protobuf::MessageFull>::descriptor().oneof_by_name("OptAddr").unwrap()).clone()
        }
    }

    impl OptAddr {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<OptAddr>("OptAddr")
        }
    }
}

// @@protoc_insertion_point(message:MemAgent.DelRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DelRequest {
    // message fields
    // @@protoc_insertion_point(field:MemAgent.DelRequest.pid)
    pub pid: u64,
    // special fields
    // @@protoc_insertion_point(special_field:MemAgent.DelRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DelRequest {
    fn default() -> &'a DelRequest {
        <DelRequest as ::protobuf::Message>::default_instance()
    }
}

impl DelRequest {
    pub fn new() -> DelRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &DelRequest| { &m.pid },
            |m: &mut DelRequest| { &mut m.pid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DelRequest>(
            "DelRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DelRequest {
    const NAME: &'static str = "DelRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pid = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.pid != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.pid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.pid != 0 {
            os.write_uint64(1, self.pid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DelRequest {
        DelRequest::new()
    }

    fn clear(&mut self) {
        self.pid = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DelRequest {
        static instance: DelRequest = DelRequest {
            pid: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DelRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DelRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DelRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fuksmd_ctl.proto\x12\x08MemAgent\x1a\x1bgoogle/protobuf/empty.proto\
    \".\n\x04Addr\x12\x14\n\x05start\x18\x01\x20\x01(\x04R\x05start\x12\x10\
    \n\x03end\x18\x02\x20\x01(\x04R\x03end\"O\n\nAddRequest\x12\x10\n\x03pid\
    \x18\x01\x20\x01(\x04R\x03pid\x12$\n\x04addr\x18\x02\x20\x01(\x0b2\x0e.M\
    emAgent.AddrH\0R\x04addrB\t\n\x07OptAddr\"\x1e\n\nDelRequest\x12\x10\n\
    \x03pid\x18\x01\x20\x01(\x04R\x03pid2\xe7\x01\n\x07Control\x123\n\x03Add\
    \x12\x14.MemAgent.AddRequest\x1a\x16.google.protobuf.Empty\x123\n\x03Del\
    \x12\x14.MemAgent.DelRequest\x1a\x16.google.protobuf.Empty\x129\n\x07Ref\
    resh\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.Empty\x127\n\
    \x05Merge\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.Emptyb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::empty::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Addr::generated_message_descriptor_data());
            messages.push(AddRequest::generated_message_descriptor_data());
            messages.push(DelRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
